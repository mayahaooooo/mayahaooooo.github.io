<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ssm(二)之service]]></title>
    <url>%2F2017%2F12%2F27%2Fssm-%E4%BA%8C-%E4%B9%8Bservice%2F</url>
    <content type="text"><![CDATA[#Service 接上篇文章 Service: 业务层 把数据 经过–复杂的业务流程处理– 1. 新建Service接口12345678910111213141516171819public interface IUserInfoService &#123; /** * 注册 * @return */ String registerUser(Map&lt;String,Object&gt; map); /** * 登陆 * @param map * @return */ String loginUser(Map&lt;String,Object&gt; map); &#125; 2. 实现Servie接口1234567891011121314151617181920212223242526272829@Service //用于标注业务层组件public class UserInfoServiceImpl implements IUserInfoService&#123; @Autowired //它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作 private UserInfoDao userInfoDao; public String registerUser(Map&lt;String, Object&gt; map) &#123; userInfoDao.insertUserInfo(map); return null; &#125; /** * 做业务处理工作 * @param map * @return */ public String loginUser(Map&lt;String, Object&gt; map) &#123; UserInfo userInfo = userInfoDao.login(map); if (userInfo.getPas().equals(map.get(&quot;pas&quot;).toString())) &#123; return &quot;success&quot;; &#125;else&#123; return &quot;fail&quot;; &#125; &#125;&#125; 3. 新建spring-service.xml1目录：resources/spring/spring-service.xml 1注意：com.myh.service 换成你的service 文件所在的包 12345678910111213141516171819202122&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt; &lt;!--配置自动扫描service包下的注解--&gt; &lt;context:component-scan base-package=&quot;com.myh.service&quot;/&gt; &lt;!--配置事物--&gt; &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;!--注入数据库连接池 --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;/bean&gt; &lt;!--开启基于注解的申明式事物--&gt; &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;&lt;/beans&gt; #Controller Controller: 控制层 用户请求后–把经过业务处理的结果–反馈给用户 1. 配置 web.xml1234注意 classpath: 指向的地址&lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot; metadata-complete=&quot;true&quot;&gt; &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt; &lt;!--配置springmvc的配置文件 该servlet名为mvc-dispatcher（名称可修改），用于拦截请求（url-pattern为 / ，说明拦截所有请求）， 并交由Spring MVC的后台控制器来处理。这一项配置是必须的。 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!--配置springmvc的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;!--直接拦截所有请求，不再采用spring2.0的/*或者*.do方式--&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt; 2. 配置spring-mvc1注意修改 com.myh.controller 为自己Controllrt 所在目录 123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!--开启自动扫描带web注解的类--&gt; &lt;context:component-scan base-package=&quot;com.myh.controllers&quot;/&gt; &lt;!--开启基于注解的开发--&gt; &lt;!--自动注册DefaultAnnotationHandlerMapping,AnnotationMethoderAdapter--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--开启对静态资源的过滤--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--配置视图解析--&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt;&lt;/beans&gt; 3. 新建Controller 类1注意加注解 12345678910111213141516171819202122232425262728293031323334353637383940414243@Controller@RequestMapping(&quot;userInfo&quot;)public class UserInfoController &#123; private final IUserInfoService userInfoService; @Autowired public UserInfoController(IUserInfoService seckillService) &#123; this.userInfoService = seckillService; &#125; /** * 用户注册 * @return */ @RequestMapping(value = &quot;/reg&quot;,method = RequestMethod.GET) @ResponseBody public String register(@RequestParam Map&lt;String, Object&gt; param)&#123; userInfoService.registerUser(param); return &quot;success&quot;; &#125; /** * 用户登陆 * @return */ @RequestMapping(value = &quot;/login&quot;,method = RequestMethod.GET) @ResponseBody public String loginUser(@RequestParam Map&lt;String, Object&gt; param) &#123; String result = userInfoService.loginUser(param); return result; &#125;&#125; run 项目 12345678910(注册的时候还应该 做account 是否重复判断，我没有写)http://localhost:8080/userInfo/reg?account=1&amp;pas=2会返回 success然后 登陆http://localhost:8080/userInfo/reg?account=1&amp;pas=2会返回 successhttp://localhost:8080/userInfo/reg?account=1&amp;pas=22会返回 fail #自此完结]]></content>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cc]]></title>
    <url>%2F2017%2F12%2F27%2Fcc%2F</url>
    <content type="text"><![CDATA[SSM各层初浅理解 Dao：持久层 对数据库进行操作 Service: 业务层 把数据 经过—复杂的业务流程处理– Controller: 控制层 用户请求后–把经过业务处理的结果–反馈给用户 快速入手ssm教程前言（一个粗糙但对刚了解ssm有用的文档） 本人萌新 学习自 慕课网大佬的视频 写的只是个人初步的理解 目的：新手如何快速成功的搭建一个ssm 项目 需要理论知识的请查看其它专业资料 一. 开发环境 Intellij IDEA Tomcate JDK 1.8 MySql 二. 文件理解（必要条件） pom.xmlmaven 配置所需要的jar包，以及插件 web.xml用来配置：欢迎页、servlet（拦截器）、filter等的。 resources/spring/spring-dao配置数据库连接池，配置sqlSessionFactory对象，配置mapper接口包,动态实现mapper接口，注入到Spring容器等 resources/spring/spring-mvc开启自动扫描带web注解的Controller类,配置视图解析等 resources/spring/spring-service配置自动扫描service包下的注解,配置事物 resources/mybatis-config.xml配置mybatis 全局属性 resources/mapper/UserInfoMapper/*.xml对数据库操作的 xml jdbc.properties初始化数据库连接配置 log4j.properties配置日志 资源结构目录 三. DAO 实现 1. 新建项目2. 配置pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;dependencies&gt; &lt;!--junit测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--配置日志相关，日志门面使用slf4j，日志的具体实现由logback实现--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.8.0-alpha2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据库相关依赖--&gt; &lt;!--首先导入连接Mysql数据连接--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.39&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入mybatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-typehandlers-jsr310&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入Servlet web相关的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring默认的json转换--&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入spring相关依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入springTest--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.2.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入连接redis的JAR包--&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加序列化依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入apache工具类--&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 3. 配置jdbc.properties1在resources目录下新建 jdbc.properties，并配置 1234jdbc.driver=com.mysql.jdbc.Driverjdbc.user=rootjdbc.password=rootjdbc.url=jdbc:mysql://120.0.0.0:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false 1换上自己mysql 的账号，密码，ip,以及数据库名 4. 配置log4j.properties1在resources目录下新建 log4j.properties，并配置 12345678910111213log4j.logger.org.mybatis=TRACElog4j.logger.com.suny.dao=TRACElog4j.rootLogger=WARN, stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%nlog4j.appender.logfile=org.apache.log4j.FileAppenderlog4j.appender.logfile.File=target/spring.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n 5. 配置mybatis-config.xml1在resources目录下新建 mybatis-config.xml 并配置 12345678910111213141516&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot; &gt;&lt;configuration&gt; &lt;!--首先配置全局属性--&gt; &lt;settings&gt; &lt;!--开启自动填充主键功能，原理时通过jdbc的一个方法getGeneratekeys获取自增主键值--&gt; &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;true&quot;/&gt; &lt;!--使用别名替换列名，默认就是开启的--&gt; &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt; &lt;!--开启驼峰命名的转换--&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt;&lt;/configuration&gt; 6. 新建spring-dao.xml文件夹1resources/spring/spring-dao.xml 12345**注意** 1. com.myh.entity，2. com.myh.dao，3. classpath*:mapper/*.xml**分别换成 自己的 实体类，DAO接口，和 mapper xml的目录** 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt; &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt; &lt;!--配置数据库连接池--&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;!--配置基本的数据库连接--&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt; &lt;!--c3p0私有属性--&gt; &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt; &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt; &lt;!--关闭连接后不自动commit--&gt; &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt; &lt;!--获取连接超时时间--&gt; &lt;property name=&quot;checkoutTimeout&quot; value=&quot;1000&quot;/&gt; &lt;!--当获取连接失败时的重试次数--&gt; &lt;/bean&gt; &lt;!--配置sqlSessionFactory对象--&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!--注入数据库连接池--&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;!--配置mybatis全局配置文件--&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt; &lt;!--配置entity包,也就是实体类包，自动扫描,用于别名配置--&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.myh.entity&quot;/&gt; &lt;!--配置需要扫描的mapper.xml文件--&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:mapper/*.xml&quot;/&gt; &lt;/bean&gt; &lt;!--配置mapper接口包,动态实现mapper接口，注入到Spring容器--&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!--注入sqlSessionFactory,请注意不要使用sqlSessionFactoryBean，否则会出现注入异常--&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt; &lt;!--给出要扫描的mapper接口--&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.myh.dao&quot;/&gt; &lt;/bean&gt;&lt;/beans&gt; 6. 新建Model实体类UserInfo12345678910111213141516171819202122232425262728293031323334353637public class UserInfo &#123; /** * 账号 */ private String account; /** * 密码 */ private String pas; public String getAccount() &#123; return account; &#125; public void setAccount(String account) &#123; this.account = account; &#125; public String getPas() &#123; return pas; &#125; public void setPas(String pas) &#123; this.pas = pas; &#125; @Override public String toString() &#123; return &quot;UserInfo2&#123;&quot; + &quot;account=&apos;&quot; + account + &apos;\&apos;&apos; + &quot;, pas=&apos;&quot; + pas + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; 7. 建立Model相对应的DAO 接口123456789101112131415161718public interface UserInfoDao &#123; /** * 注册用户 * @param map * @return */ int insertUserInfo(Map&lt;String,Object&gt; map); /** * 登陆 * @param map * @return */ UserInfo login(Map&lt;String,Object&gt; map);&#125; 8. 新建UserInfoMapper.xml1resources/mapper/UserInfoMapper.xml 12namespace:指向创建的DAO接口resultType: 返回定义的实体类 123456789101112131415161718192021&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.myh.dao.UserInfoDao&quot;&gt; &lt;insert id=&quot;insertUserInfo&quot; &gt; INSERT INTO user_info (account,pas) VALUES (#&#123;account&#125;,#&#123;pas&#125;) &lt;/insert&gt; &lt;select id=&quot;login&quot; resultType=&quot;com.myh.entity.UserInfo&quot;&gt; SELECT * FROM user_info WHERE user_info.account = #&#123;account&#125; &lt;/select&gt; &lt;/mapper&gt; 9. 新建数据库,创建表 user_info ,字段 123451. 新建数据库 test2. 创建表 user_info 3. 字段 id(自增，主键),account ,pas 10. 创建测试类 测试1用快捷键 command+shift+T 创建测试类 123//注意记得添加一下注解@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;) Test类代码 123456789101112131415161718192021222324@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;&quot;classpath:spring/spring-dao.xml&quot;&#125;)public class UserInfoDao2Test &#123; @Resource UserInfoDao userInfoDao; @Test public void insertUserInfo() throws Exception &#123; Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;(); map.put(&quot;account&quot;,&quot;ali&quot;); map.put(&quot;pas&quot;,&quot;123&quot;); int result = userInfoDao.insertUserInfo(map); System.out.println(&quot;result==&quot;+result); &#125; @Test public void login() throws Exception &#123; &#125;&#125; 跑起来 结果 当返回结果为1 的时候就代表，数据已经插入数据库 自此DAO使用mybatis搭建成功]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
